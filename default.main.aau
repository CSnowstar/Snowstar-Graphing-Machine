import win.ui;
import console
/*DSG{{*/
mainForm = win.form(text="aardio form";right=871;bottom=663)
mainForm.add(
btnGoCenter={cls="button";text="归中";left=304;top=576;right=586;bottom=658;font=LOGFONT(h=-24);z=6};
btnResetLine={cls="button";text="校准位置(k/2,0)";left=560;top=48;right=776;bottom=120;font=LOGFONT(h=-24);tabstop=1;z=3};
btnUnitTest={cls="button";text="运行单元测试";left=600;top=576;right=864;bottom=656;font=LOGFONT(h=-28);z=7};
lblLineL={cls="static";text="LineL: ";left=56;top=56;right=272;bottom=96;font=LOGFONT(h=-24);notify=1;transparent=1;z=1};
lblLineR={cls="static";text="LineR: ";left=56;top=88;right=272;bottom=128;font=LOGFONT(h=-24);transparent=1;z=4};
trbLineL={cls="trackbar";left=264;top=48;right=560;bottom=78;font=LOGFONT(h=-24);max=100;min=0;tabstop=1;z=2};
trbLineR={cls="trackbar";left=264;top=88;right=560;bottom=118;font=LOGFONT(h=-24);max=100;min=0;tabstop=1;z=5}
)
/*}}*/

mainForm.lblLineL.oncommand = function(id,event){
	//mainForm.msgbox( mainForm.lblLineL.text );
	
	
}


console.open()
import sscyan.serial
Ssgm = class{
    ctor(serialName, d, k, rL, rR){
        this._d = d
        this._k = k
        this._rL = rL
        this._rR = rR
        this._se = assert(..sscyan.serial(serialName, 115200), "串口错误")
    }
    Action = class{
        ctor(revolutionsL=0, revolutionsR=0, pitchPen=0){
            this.revolutionsL = revolutionsL;
            this.revolutionsR = revolutionsR;
            this.pitchPen = pitchPen;
        }
        float revolutionsL;
        float revolutionsR;
        float pitchPen;
    }
    DeltaPps = function(deltaX, deltaY){
        GoPoint(this.ptX + deltaX, this.ptY + deltaY)
    }
    GoPoint = function(x, y){
        var lineL = ..math.sqrt((x - this._k / 2 - 0      ) ** 2 + (y - 0) ** 2)
        var lineR = ..math.sqrt((x - this._k / 2 - this._d) ** 2 + (y - 0) ** 2)
        return this.ChangeLineTo(lineL, lineR)
    }
    GoPointScaled = function(x, y){
        return this.GoPoint(x * this._d, y * this._d)
    }
    ChangeLineTo = function(lineL, lineR){
        var deltaLineL = lineL - this.lineL
        var deltaLineR = lineR - this.lineR
        return this.ChangeLine(deltaLineL, deltaLineR)
        
    }
    ChangeLine = function(deltaLineL, deltaLineR){
        var revolutionsL = (-deltaLineL / (2 * ..math.pi * this._rL))
        var revolutionsR = ( deltaLineR / (2 * ..math.pi * this._rR))
        return this.Revolve(revolutionsL, revolutionsR)
    }
    Revolve = function(revolutionsL, revolutionsR){
        return this.SendData(revolutionsL, revolutionsR, this.pitchPen)
    }
    ChangePitchPen = function(pitchPen){
        return this.SendData(this.revolutionsL, this.revolutionsR, pitchPen)
    }
    SendData = function(revolutionsL, revolutionsR, pitchPen){
        this.lineL += - revolutionsL * (2 * ..math.pi * this._rL)
        this.lineR +=   revolutionsR * (2 * ..math.pi * this._rR)
        data = this.Action(revolutionsL, revolutionsR, pitchPen)
    	..console.dump(data)

        return this._se.write(data)
    }
    GoCenter = function(x, y){
        this.GoPoint(d/2, d/2)
    }
    State = function(){
        return
            this.lineL,
            this.lineR,
            this.ptX,
            this.ptY,
            this.pitchPen
    }
    lineL = 0;
    lineR = 0;
    ptX = 0;
    ptY = 0;
    pitchPen = 0;
}

//wt32 = sscyan.wintab32(mainForm)


d = 155
k = 38
rL = 3.26036
rR = 3.26036

ssgm = Ssgm("COM4", d, k, rL, rR)

UpdateLines = function(){
	var lineL, lineR, x, y = ssgm.State()
	mainForm.lblLineL.text = "LineL: " ++ ..string.format("[%0.2f]", lineL)
	mainForm.lblLineR.text = "LineR: " ++ ..string.format("[%0.2f]", lineR)
	mainForm.text = "雪星图画机" ++ ..string.format("[%0.2f, %0.2f]", x, y)
}
// io.open()
// import sscyan.serial
// import sscyan.wintab32

// wt32 = sscyan.wintab32(mainForm)

// //
// mainForm.wndproc = {
// //    [0x7FF0/*_WT_PACKET*/] = function(hwnd,message,wParam,lParam){ 
// //        pkt = wt32.getPacket(wParam)
// //
// //        console.log(pkt.pkButtons       )
// //        console.log(pkt.pkX             )
// //        console.log(pkt.pkY             )
// //        console.log(pkt.pkZ             )
// //        console.log(pkt.pkNormalPressure)
// //    }
// }



mainForm.wndproc = {
    [0x202/*_WM_LBUTTONUP*/] = function(hwnd,message,wParam,lParam){ 
        var x,y = win.getMessagePos(lParam);
        
        var rct = mainForm.getClientRect()
        var w = rct.right - rct.left
        var h = rct.bottom - rct.top
        
        ssgm.pitchPen = 0.5
        ssgm.GoPointScaled(x / w, y / h)
        UpdateLines()
    }
}

mainForm.btnResetLine.oncommand = function(id,event){
    ssgm.lineL = 0;
    ssgm.lineR = ssgm._d - ssgm._k;
    ssgm.ptX = ssgm._k / 2;
    ssgm.ptY = 0; 
    UpdateLines()
}

mainForm.btnGoCenter.oncommand = function(id,event){
    ssgm.pitchPen = 0.5
    ssgm.GoCenter()
    UpdateLines()
}

mainForm.trbLineR.oncommand = function(id,event,pos){
    ssgm.Revolve(0, ((mainForm.trbLineR.pos-50) / 50))
    UpdateLines()
    mainForm.trbLineR.pos = 50
}
mainForm.trbLineR.pos = 50

mainForm.trbLineL.oncommand = function(id,event,pos){
    ssgm.Revolve(((mainForm.trbLineL.pos-50) / 50), 0)
    UpdateLines()
    mainForm.trbLineL.pos = 50
}
mainForm.trbLineL.pos = 50


mainForm.btnUnitTest.oncommand = function(id,event){
	UserChecking = function(txt){
		return mainForm.msgbox(txt,"单元测试")
	}
	
    //放2圈
	if!UserChecking("放线2圈")return;
    ssgm.Revolve(-2,  2)
    
    //收2圈
    if!UserChecking("收线2圈")return;
    ssgm.Revolve( 2, -2)
    
    //放20mm
    if!UserChecking("放线20mm")return;
    ssgm.ChangeLine( 20,  20)
    
    //收20mm
    if!UserChecking("收线20mm")return;
    ssgm.ChangeLine(-20, -20)
}




mainForm.show() 
return win.loopMessage();
